/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooKPiMass.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h"
#include <complex>
#include "libComplexPDF/libComplexPDF.h"

ClassImp(RooKPiMass) 

RooKPiMass::RooKPiMass(const char *name, const char *title,
		RooAbsReal& _m,
		RooAbsReal& _mass_0,
		RooAbsReal& _width_0,
		RooAbsReal& _a,
		RooAbsReal& _b,
		RooAbsReal& _mass_1,
		RooAbsReal& _width_1,
		RooAbsReal& _r_1,
		RooAbsReal& _mass_2,
		RooAbsReal& _width_2,
		RooAbsReal& _r_2,
		RooAbsReal& _amp_0,
		RooAbsReal& _phase_0,
		RooAbsReal& _amp_1,
		RooAbsReal& _phase_1,
		RooAbsReal& _amp_2,
		RooAbsReal& _phase_2,
		double _m1,
		double _m2) :
		RooAbsPdf(name,title),
		m("m","m",this,_m),
		mass_0("mass_0","mass_0",this,_mass_0),
		width_0("width_0","width_0",this,_width_0),
		a("a","a",this,_a),
		b("b","b",this,_b),
		mass_1("mass_1","mass_1",this,_mass_1),
		width_1("width_1","width_1",this,_width_1),
		r_1("r_1","r_1",this,_r_1),
		mass_2("mass_2","mass_2",this,_mass_2),
		width_2("width_2","width_2",this,_width_2),
		r_2("r_2","r_2",this,_r_2),
		amp_0("amp_0","amp_0",this,_amp_0),
		phase_0("phase_0","phase_0",this,_phase_0),
		amp_1("amp_1","amp_1",this,_amp_1),
		phase_1("phase_1","phase_1",this,_phase_1),
		amp_2("amp_2","amp_2",this,_amp_2),
		phase_2("phase_2","phase_2",this,_phase_2),
		m1(_m1),
		m2(_m2) {
}

RooKPiMass::RooKPiMass(const RooKPiMass& other, const char* name) :
	   RooAbsPdf(other,name),
	   m("m",this,other.m),
	   mass_0("mass_0",this,other.mass_0),
	   width_0("width_0",this,other.width_0),
	   a("a",this,other.a),
	   b("b",this,other.b),
	   mass_1("mass_1",this,other.mass_1),
	   width_1("width_1",this,other.width_1),
	   r_1("r_1",this,other.r_1),
	   mass_2("mass_2",this,other.mass_2),
	   width_2("width_2",this,other.width_2),
	   r_2("r_2",this,other.r_2),
	   amp_0("amp_0",this,other.amp_0),
	   phase_0("phase_0",this,other.phase_0),
	   amp_1("amp_1",this,other.amp_1),
	   phase_1("phase_1",this,other.phase_1),
	   amp_2("amp_2",this,other.amp_2),
	   phase_2("phase_2",this,other.phase_2),
	   m1(other.m1),
	   m2(other.m2) {
}

double RooKPiMass::CalculateMomentum(double m) const {
	const double add_12 = m1 + m2;
	const double sub_12 = m1 - m2;

	return std::sqrt((m*m - add_12*add_12)*(m*m - sub_12*sub_12))/(2.0*m);
}

Double_t RooKPiMass::evaluate() const {
	// calculate momentum in rest frame of resonance
	double q = CalculateMomentum(m);
	double q_0 = CalculateMomentum(mass_0);
	double q_1 = CalculateMomentum(mass_1);
	double q_2 = CalculateMomentum(mass_2);
	// call complexPDF C++ library to get complex amplitudes
	std::complex<double> lass = ComplexPDF::LASS(m,mass_0,width_0,a,b,q,q_0);
	std::complex<double> rbw_1 = ComplexPDF::RelativisticSpinBreitWigner(m,mass_1,width_1,r_1,1,q,q_1);
	std::complex<double> rbw_2 = ComplexPDF::RelativisticSpinBreitWigner(m,mass_2,width_2,r_2,2,q,q_2);
	// weights for each amplitude
	std::complex<double> w_0 = std::polar((double)amp_0,(double)phase_0);
	std::complex<double> w_1 = std::polar((double)amp_1,(double)phase_1);
	std::complex<double> w_2 = std::polar((double)amp_2,(double)phase_2);
	// calc combined amplitude
	std::complex<double> amplitude = w_0 * lass + w_1 * rbw_1 + w_2 * rbw_2;
	// phase space factor
	double F = ComplexPDF::PhaseSpaceFactor(m,5.2795,0.139570,0.493577,1.019460); // TODO: Pass parameters!
	// return |A|^2
	return std::norm(amplitude) * F;
}
