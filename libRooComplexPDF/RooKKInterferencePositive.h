/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

#ifndef ROOKKINTERFERENCEPOSITIVE
#define ROOKKINTERFERENCEPOSITIVE

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include "RooMassHelicityAngles.h"
#include "RooKKInterference.h"

class RooKKInterferencePositive : public RooAbsPdf {
public:
	RooKKInterferencePositive() : m_acceptance_function(UNIFORM), m_1a(0), m_1b(0), m_2a(0), m_2b(0), m_3a(0), m_3b(0), m1(0), m2(0), m3(0), mM(0),
							m_norm_cache_integrator(NULL), m_real_cache_integrator(NULL), m_imag_cache_integrator(NULL) {} ;
	RooKKInterferencePositive(const char *name, const char *title,
			RooAbsReal& _m,
			RooAbsReal& _phi,
			RooAbsReal& _cos_th1,
			RooAbsReal& _cos_th2,
			RooAbsReal& _amp_flatte,
			RooAbsReal& _phase_flatte,
			RooAbsReal& _mass_flatte,
			RooAbsReal& _g_1,
			RooAbsReal& _g_2,
			RooAbsReal& _g_3,
			RooAbsReal& _amp_phi_long,
			RooAbsReal& _phase_phi_long,
			RooAbsReal& _amp_phi_para,
			RooAbsReal& _phase_phi_para,
			RooAbsReal& _amp_phi_perp,
			RooAbsReal& _phase_phi_perp,
			RooAbsReal& _mass_phi,
			RooAbsReal& _width_phi,
			RooAbsReal& _r_phi,
			RooAbsReal& _J_phi,
			ACCEPTANCE_FUNCTION _acceptance_function,
			double _m_1a,
			double _m_1b,
			double _m_2a,
			double _m_2b,
			double _m_3a,
			double _m_3b,
			double _m1,
			double _m2,
			double _m3,
			double _mM,
			KKInterferenceCacheIntegrators_4D _s_4D);
	RooKKInterferencePositive(const RooKKInterferencePositive& other, const char* name=0) ;
	virtual TObject* clone(const char* newname) const { return new RooKKInterferencePositive(*this,newname); }
	inline virtual ~RooKKInterferencePositive() { }

	virtual Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const;
	virtual Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const;

protected:

	RooRealProxy m;
	RooRealProxy phi;
	RooRealProxy cos_th1;
	RooRealProxy cos_th2;
	RooRealProxy amp_flatte;
	RooRealProxy phase_flatte;
	RooRealProxy mass_flatte;
	RooRealProxy g_1;
	RooRealProxy g_2;
	RooRealProxy g_3;
	RooRealProxy amp_phi_long;
	RooRealProxy phase_phi_long;
	RooRealProxy amp_phi_para;
	RooRealProxy phase_phi_para;
	RooRealProxy amp_phi_perp;
	RooRealProxy phase_phi_perp;
	RooRealProxy mass_phi;
	RooRealProxy width_phi;
	RooRealProxy r_phi;
	RooRealProxy J_phi;
	const ACCEPTANCE_FUNCTION m_acceptance_function;
	const double m_1a;
	const double m_1b;
	const double m_2a;
	const double m_2b;
	const double m_3a;
	const double m_3b;
	const double m1;
	const double m2;
	const double m3;
	const double mM;

	//! in begin of comments prevents ROOT to try to serialize it...
	CacheIntegrator<KKInterferenceNormCachedIntegral> *m_norm_cache_integrator; //! don't serialize
	CacheIntegrator<KKInterferenceRealCachedIntegral> *m_real_cache_integrator; //! don't serialize
	CacheIntegrator<KKInterferenceImagCachedIntegral> *m_imag_cache_integrator; //! don't serialize

	Double_t evaluate() const;

private:

	ClassDef(RooKKInterferencePositive,1) // Your description goes here...
};

#endif
