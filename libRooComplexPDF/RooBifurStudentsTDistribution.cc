/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooBifurStudentsTDistribution.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h"
#include "libComplexPDF/libComplexPDF.h"

ClassImp(RooBifurStudentsTDistribution) 

RooBifurStudentsTDistribution::RooBifurStudentsTDistribution(const char *name, const char *title,
		RooAbsReal& _x,
		RooAbsReal& _mu,
		RooAbsReal& _sigma,
		RooAbsReal& _sigma_asym,
		RooAbsReal& _nu_l,
		RooAbsReal& _nu_r) :
		RooAbsPdf(name,title),
		x("x","x",this,_x),
		mu("mu","mu",this,_mu),
		sigma("sigma","sigma",this,_sigma),
		sigma_asym("sigma_asym","sigma_asym",this,_sigma_asym),
		nu_l("nu_l","nu_l",this,_nu_l),
		nu_r("nu_r","nu_r",this,_nu_r) {
}

RooBifurStudentsTDistribution::RooBifurStudentsTDistribution(const RooBifurStudentsTDistribution& other, const char* name) :
		RooAbsPdf(other,name),
		x("x",this,other.x),
		mu("mu",this,other.mu),
		sigma("sigma",this,other.sigma),
		sigma_asym("sigma_asym",this,other.sigma_asym),
		nu_l("nu_l",this,other.nu_l),
		nu_r("nu_r",this,other.nu_r){
}

Double_t RooBifurStudentsTDistribution::evaluate() const {
	double sigma_asym_safe = sigma_asym;
	if(std::fabs(sigma_asym_safe) == 1.0){
		std::cout << "WARNING: Sigma asymmetry in RooBifurStudentsTDistribution has reached its limits of +- 1.0! Resetting asymmetry to 0.99!" << std::endl;
		sigma_asym_safe = 0.99;
	}
	if(x < mu) {
		double s = sigma*(1.0 + sigma_asym_safe);
		double lambda_l = 1.0 / (s*s);
		return ComplexPDF::StudentsTDistribution(x,mu,lambda_l,nu_l);
	} else {
		double s = sigma*(1.0 - sigma_asym_safe);
		double lambda_r = 1.0 / (s*s);
		return ComplexPDF::StudentsTDistribution(x,mu,lambda_r,nu_r);
	}
}
