/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

#ifndef ROOMASSHELICITYANGLES
#define ROOMASSHELICITYANGLES

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"

/**
 * @brief enum with different acceptance functions
 *
 * 0 = Uniform over phase space
 * 1 = Uniform but with cos_th1<0.75 cut
 * 2 = 4D product of 1D efficiency marginal distributions
 * 3 = 4D histogram of efficiency distribution
 */
enum ACCEPTANCE_FUNCTION { UNIFORM = 0, CUT_TH1 = 1, PRODUCT_4D = 2, HIST_4D = 3};

/**
 * @brief public arrays with parameters of efficiency function for systematics
 */
extern double EffParam[7];
extern double EffParamErr[7];

/**
 * @brief Returns acceptance function for a certain point in 4D space
 *
 * @param m
 * @param phi
 * @param th1
 * @param th2
 * @param value
 * @return
 */
double GetEff(const double m, const double phi, const double th1, const double th2,	ACCEPTANCE_FUNCTION value);

// forward declarations
template <class T>
class CacheIntegrator;
class MassHelicityAnglesCoreCachedIntegral;
class MassHelicityAnglesNormCachedIntegral;
class MassHelicityAnglesRealCachedIntegral;
class MassHelicityAnglesImagCachedIntegral;
class MassHelicityAnglesNormCachedIntegral_phi_th1_th2;
class MassHelicityAnglesRealCachedIntegral_phi_th1_th2;
class MassHelicityAnglesImagCachedIntegral_phi_th1_th2;
class MassHelicityAnglesNormCachedIntegral_m_th1_th2;
class MassHelicityAnglesRealCachedIntegral_m_th1_th2;
class MassHelicityAnglesImagCachedIntegral_m_th1_th2;
class MassHelicityAnglesNormCachedIntegral_m_phi_th2;
class MassHelicityAnglesRealCachedIntegral_m_phi_th2;
class MassHelicityAnglesImagCachedIntegral_m_phi_th2;
class MassHelicityAnglesNormCachedIntegral_m_phi_th1;
class MassHelicityAnglesRealCachedIntegral_m_phi_th1;
class MassHelicityAnglesImagCachedIntegral_m_phi_th1;

struct MHI_PDG_constants {
	double m_Pi;
	double m_K;
	double m_Phi;
	double m_B0;
};

struct MHI_CacheIntegrators_4D {
	CacheIntegrator<MassHelicityAnglesNormCachedIntegral> *norm_cache_integrator;
	CacheIntegrator<MassHelicityAnglesRealCachedIntegral> *real_cache_integrator;
	CacheIntegrator<MassHelicityAnglesImagCachedIntegral> *imag_cache_integrator;
};

struct MHI_CacheIntegrators_3D_phi_th1_th2 {
	CacheIntegrator<MassHelicityAnglesNormCachedIntegral_phi_th1_th2> *norm_cache_integrator_phi_th1_th2;
	CacheIntegrator<MassHelicityAnglesRealCachedIntegral_phi_th1_th2> *real_cache_integrator_phi_th1_th2;
	CacheIntegrator<MassHelicityAnglesImagCachedIntegral_phi_th1_th2> *imag_cache_integrator_phi_th1_th2;
};

struct MHI_CacheIntegrators_3D_m_th1_th2 {
	CacheIntegrator<MassHelicityAnglesNormCachedIntegral_m_th1_th2> *norm_cache_integrator_m_th1_th2;
	CacheIntegrator<MassHelicityAnglesRealCachedIntegral_m_th1_th2> *real_cache_integrator_m_th1_th2;
	CacheIntegrator<MassHelicityAnglesImagCachedIntegral_m_th1_th2> *imag_cache_integrator_m_th1_th2;
};

struct MHI_CacheIntegrators_3D_m_phi_th2 {
	CacheIntegrator<MassHelicityAnglesNormCachedIntegral_m_phi_th2> *norm_cache_integrator_m_phi_th2;
	CacheIntegrator<MassHelicityAnglesRealCachedIntegral_m_phi_th2> *real_cache_integrator_m_phi_th2;
	CacheIntegrator<MassHelicityAnglesImagCachedIntegral_m_phi_th2> *imag_cache_integrator_m_phi_th2;
};

struct MHI_CacheIntegrators_3D_m_phi_th1 {
	CacheIntegrator<MassHelicityAnglesNormCachedIntegral_m_phi_th1> *norm_cache_integrator_m_phi_th1;
	CacheIntegrator<MassHelicityAnglesRealCachedIntegral_m_phi_th1> *real_cache_integrator_m_phi_th1;
	CacheIntegrator<MassHelicityAnglesImagCachedIntegral_m_phi_th1> *imag_cache_integrator_m_phi_th1;
};

class RooMassHelicityAngles : public RooAbsPdf {
public:
	RooMassHelicityAngles() : m_Pi(0), m_K(0), m_Phi(0), m_B0(0), m_acceptance_function(UNIFORM),
					m_norm_cache_integrator(NULL), m_real_cache_integrator(NULL),
					m_imag_cache_integrator(NULL), m_norm_cache_integrator_phi_th1_th2(NULL),
					m_real_cache_integrator_phi_th1_th2(NULL), m_imag_cache_integrator_phi_th1_th2(NULL),
					m_norm_cache_integrator_m_th1_th2(NULL), m_real_cache_integrator_m_th1_th2(NULL),
					m_imag_cache_integrator_m_th1_th2(NULL), m_norm_cache_integrator_m_phi_th2(NULL),
					m_real_cache_integrator_m_phi_th2(NULL), m_imag_cache_integrator_m_phi_th2(NULL),
					m_norm_cache_integrator_m_phi_th1(NULL), m_real_cache_integrator_m_phi_th1(NULL),
					m_imag_cache_integrator_m_phi_th1(NULL) {
	};
	RooMassHelicityAngles(const char *name, const char *title,
			RooAbsReal& _m,
			RooAbsReal& _phi,
			RooAbsReal& _cos_th1,
			RooAbsReal& _cos_th2,
			RooAbsReal& _mass_0,
			RooAbsReal& _width_0,
			RooAbsReal& _a,
			RooAbsReal& _b,
			RooAbsReal& _mass_1,
			RooAbsReal& _width_1,
			RooAbsReal& _r_1,
			RooAbsReal& _mass_2,
			RooAbsReal& _width_2,
			RooAbsReal& _r_2,
			RooAbsReal& _amp_00,
			RooAbsReal& _phase_00,
			RooAbsReal& _amp_1m,
			RooAbsReal& _phase_1m,
			RooAbsReal& _amp_10,
			RooAbsReal& _phase_10,
			RooAbsReal& _amp_1p,
			RooAbsReal& _phase_1p,
			RooAbsReal& _amp_2m,
			RooAbsReal& _phase_2m,
			RooAbsReal& _amp_20,
			RooAbsReal& _phase_20,
			RooAbsReal& _amp_2p,
			RooAbsReal& _phase_2p,
			ACCEPTANCE_FUNCTION _acceptance_function,
			MHI_PDG_constants _s_PDG,
			MHI_CacheIntegrators_4D _s_4D,
			MHI_CacheIntegrators_3D_phi_th1_th2 _s_3D_phi_th1_th2,
			MHI_CacheIntegrators_3D_m_th1_th2 _s_3D_m_th1_th2,
			MHI_CacheIntegrators_3D_m_phi_th2 _s_3D_m_phi_th2,
			MHI_CacheIntegrators_3D_m_phi_th1 _s_3D_m_phi_th1);
	RooMassHelicityAngles(const RooMassHelicityAngles& other, const char* name=0);
	virtual TObject* clone(const char* newname) const {
		return new RooMassHelicityAngles(*this,newname);
	}
	inline virtual ~RooMassHelicityAngles() { };

	virtual Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const;
	virtual Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const;

protected:

	RooRealProxy m;
	RooRealProxy phi;
	RooRealProxy cos_th1;
	RooRealProxy cos_th2;
	RooRealProxy mass_0;
	RooRealProxy width_0;
	RooRealProxy a;
	RooRealProxy b;
	RooRealProxy mass_1;
	RooRealProxy width_1;
	RooRealProxy r_1;
	RooRealProxy mass_2;
	RooRealProxy width_2;
	RooRealProxy r_2;
	RooRealProxy amp_00;
	RooRealProxy phase_00;
	RooRealProxy amp_1m;
	RooRealProxy phase_1m;
	RooRealProxy amp_10;
	RooRealProxy phase_10;
	RooRealProxy amp_1p;
	RooRealProxy phase_1p;
	RooRealProxy amp_2m;
	RooRealProxy phase_2m;
	RooRealProxy amp_20;
	RooRealProxy phase_20;
	RooRealProxy amp_2p;
	RooRealProxy phase_2p;

	const double m_Pi;
	const double m_K;
	const double m_Phi;
	const double m_B0;

	const ACCEPTANCE_FUNCTION m_acceptance_function;

	//! in begin of comments prevents ROOT to try to serialize it...
	CacheIntegrator<MassHelicityAnglesNormCachedIntegral> *m_norm_cache_integrator; //! don't serialize
	CacheIntegrator<MassHelicityAnglesRealCachedIntegral> *m_real_cache_integrator; //! don't serialize
	CacheIntegrator<MassHelicityAnglesImagCachedIntegral> *m_imag_cache_integrator; //! don't serialize
	CacheIntegrator<MassHelicityAnglesNormCachedIntegral_phi_th1_th2> *m_norm_cache_integrator_phi_th1_th2; //! don't serialize
	CacheIntegrator<MassHelicityAnglesRealCachedIntegral_phi_th1_th2> *m_real_cache_integrator_phi_th1_th2; //! don't serialize
	CacheIntegrator<MassHelicityAnglesImagCachedIntegral_phi_th1_th2> *m_imag_cache_integrator_phi_th1_th2; //! don't serialize
	CacheIntegrator<MassHelicityAnglesNormCachedIntegral_m_th1_th2> *m_norm_cache_integrator_m_th1_th2; //! don't serialize
	CacheIntegrator<MassHelicityAnglesRealCachedIntegral_m_th1_th2> *m_real_cache_integrator_m_th1_th2; //! don't serialize
	CacheIntegrator<MassHelicityAnglesImagCachedIntegral_m_th1_th2> *m_imag_cache_integrator_m_th1_th2; //! don't serialize
	CacheIntegrator<MassHelicityAnglesNormCachedIntegral_m_phi_th2> *m_norm_cache_integrator_m_phi_th2; //! don't serialize
	CacheIntegrator<MassHelicityAnglesRealCachedIntegral_m_phi_th2> *m_real_cache_integrator_m_phi_th2; //! don't serialize
	CacheIntegrator<MassHelicityAnglesImagCachedIntegral_m_phi_th2> *m_imag_cache_integrator_m_phi_th2; //! don't serialize
	CacheIntegrator<MassHelicityAnglesNormCachedIntegral_m_phi_th1> *m_norm_cache_integrator_m_phi_th1; //! don't serialize
	CacheIntegrator<MassHelicityAnglesRealCachedIntegral_m_phi_th1> *m_real_cache_integrator_m_phi_th1; //! don't serialize
	CacheIntegrator<MassHelicityAnglesImagCachedIntegral_m_phi_th1> *m_imag_cache_integrator_m_phi_th1; //! don't serialize

	Double_t evaluate() const ;

private:

	ClassDef(RooMassHelicityAngles,1) // Your description goes here...
};

#endif
