/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooVarianceGammaDistribution.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h"
#include "libComplexPDF/libComplexPDF.h"

ClassImp(RooVarianceGammaDistribution) 

RooVarianceGammaDistribution::RooVarianceGammaDistribution(const char *name, const char *title,
		RooAbsReal& _x,
		RooAbsReal& _mu,
		RooAbsReal& _alpha,
		RooAbsReal& _beta,
		RooAbsReal& _lambda) :
		RooAbsPdf(name,title),
		x("x","x",this,_x),
		mu("mu","mu",this,_mu),
		alpha("alpha","alpha",this,_alpha),
		beta("beta","beta",this,_beta),
		lambda("lambda","lambda",this,_lambda) {
}

RooVarianceGammaDistribution::RooVarianceGammaDistribution(const RooVarianceGammaDistribution& other, const char* name) :
	   RooAbsPdf(other,name),
	   x("x",this,other.x),
	   mu("mu",this,other.mu),
	   alpha("alpha",this,other.alpha),
	   beta("beta",this,other.beta),
	   lambda("lambda",this,other.lambda) {
}

Double_t RooVarianceGammaDistribution::evaluate() const {
	return ComplexPDF::VarianceGammaDistribution(x,mu,alpha,beta,lambda);
}

Double_t RooVarianceGammaDistribution::get_mean() const {
	return ComplexPDF::VarianceGammaDistribution_GetMean(mu,alpha,beta,lambda);
}

Double_t RooVarianceGammaDistribution::get_variance() const {
	return ComplexPDF::VarianceGammaDistribution_GetVariance(mu,alpha,beta,lambda);
}
