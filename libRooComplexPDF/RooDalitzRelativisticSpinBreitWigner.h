/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

#ifndef ROODALITZRELATIVISTICSPINBREITWIGNER
#define ROODALITZRELATIVISTICSPINBREITWIGNER

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include <complex>

class RooDalitzRelativisticSpinBreitWigner : public RooAbsPdf {
public:
	RooDalitzRelativisticSpinBreitWigner() :  radius(0), spin(0), comb(0), m1(0), m2(0), m3(0), mM(0) { };
	RooDalitzRelativisticSpinBreitWigner(const char *name, const char *title,
                                         RooAbsReal& _m12,
                                         RooAbsReal& _m23,
                                         RooAbsReal& _mass_J,
                                         RooAbsReal& _width_J,
                                         RooAbsReal& _c1,
                                         RooAbsReal& _c2,
                                         RooAbsReal& _c3,
                                         RooAbsReal& _c4,
                                         double _radius,
                                         unsigned int _spin,
                                         int _comb,
                                         double _m1,
                                         double _m2,
                                         double _m3,
                                         double _mM);
	RooDalitzRelativisticSpinBreitWigner(const RooDalitzRelativisticSpinBreitWigner& other, const char* name=0);
	virtual TObject* clone(const char* newname) const {
		return new RooDalitzRelativisticSpinBreitWigner(*this,newname);
	}
	inline virtual ~RooDalitzRelativisticSpinBreitWigner() { };
    
    Double_t adaptiveSimpsonsAux(double x, double a, double b, double epsilon,double S, double fa, double fb, double fc, int bottom) const;
    Double_t adaptiveSimpsons(double x, double a, double b, double epsilon, int maxRecursionDepth) const;
    
    virtual Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const;
	virtual Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const;
    
    double function(double x,double y) const;
    
protected:
    
	RooRealProxy m12;
	RooRealProxy m23;
	RooRealProxy mass_J;
	RooRealProxy width_J;
	RooRealProxy c1;
	RooRealProxy c2;
	RooRealProxy c3;
	RooRealProxy c4;
	const double radius;
	const unsigned int spin;
    const int comb;
	const double m1;
	const double m2;
	const double m3;
	const double mM;
    
	Double_t evaluate() const;
    
private:
    
	ClassDef(RooDalitzRelativisticSpinBreitWigner,1) // Your description goes here...
};

#endif
