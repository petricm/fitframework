/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooCutPdf.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(RooCutPdf) 

RooCutPdf::RooCutPdf(const char *name, const char *title,
		RooAbsReal& _x, double _cut_value, bool _left_non_zero) :
		RooAbsPdf(name,title),
		x("x","x",this,_x),
		m_cut_value(_cut_value),
		m_left_non_zero(_left_non_zero) {
}

RooCutPdf::RooCutPdf(const RooCutPdf& other, const char* name) :
		   RooAbsPdf(other,name),
		   x("x",this,other.x),
		   m_cut_value(other.m_cut_value),
		   m_left_non_zero(other.m_left_non_zero) {
}

Double_t RooCutPdf::evaluate() const {
	if(m_left_non_zero) {
		if(x < m_cut_value)
			return 1.0;
		else
			return 0.0;
	} else {
		if(x > m_cut_value)
			return 1.0;
		else
			return 0.0;
	}
}

Int_t RooCutPdf::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /* rangeName */) const {
	if (matchArgs(allVars, analVars, x))
		return 1;
	return 0;
}

Double_t RooCutPdf::analyticalIntegral(Int_t code, const char* rangeName ) const {
	if (code == 1) {
		double norm;
		double max = x.max(rangeName);
		double min = x.min(rangeName);

		// check if cut is inside min max region
		if(m_cut_value < max && m_cut_value > min) {
			// check if left or right side is non-zero
			if(m_left_non_zero) {
				norm = m_cut_value - min;
			} else {
				norm = max - m_cut_value;
			}
		} else {
			norm = max - min;
		}
		return norm;
	}
	std::cerr << "ERROR: Unsupported analytical integral code=" << code << " in RooCutPdf::analyticalIntegral(...) " <<
				"--> Return 0" << std::endl;
	return 0;
}
