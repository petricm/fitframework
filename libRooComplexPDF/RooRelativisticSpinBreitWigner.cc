/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooRelativisticSpinBreitWigner.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 
#include "libComplexPDF/libComplexPDF.h"

ClassImp(RooRelativisticSpinBreitWigner) 

RooRelativisticSpinBreitWigner::RooRelativisticSpinBreitWigner(const char *name, const char *title,
		RooAbsReal& _m,
		RooAbsReal& _mass_J,
		RooAbsReal& _width_J,
		RooAbsReal& _r,
		RooAbsReal& _J,
		double _m1,
		double _m2) :
		RooAbsPdf(name,title),
		m("m","m",this,_m),
		mass_J("mass_J","mass_J",this,_mass_J),
		width_J("width_J","width_J",this,_width_J),
		r("r","r",this,_r),
		J("J","J",this,_J),
		m1(_m1),
		m2(_m2) {
}

RooRelativisticSpinBreitWigner::RooRelativisticSpinBreitWigner(const RooRelativisticSpinBreitWigner& other, const char* name) :
	   RooAbsPdf(other,name),
	   m("m",this,other.m),
	   mass_J("mass_J",this,other.mass_J),
	   width_J("width_J",this,other.width_J),
	   r("r",this,other.r),
	   J("J",this,other.J),
	   m1(other.m1),
	   m2(other.m2) {
}

double RooRelativisticSpinBreitWigner::CalculateMomentum(double m) const {
	const double add_12 = m1 + m2;
	const double sub_12 = m1 - m2;

	return std::sqrt((m*m - add_12*add_12)*(m*m - sub_12*sub_12))/(2.0*m);
}

Double_t RooRelativisticSpinBreitWigner::evaluate() const {
	// calculate momentum in rest frame of resonance
	double q = CalculateMomentum(m);
	double q_J = CalculateMomentum(mass_J);
	// if the resonance is evaluated at m<(m1+m2), q values could be nan and we should return 0 probability
	if(std::isnan(q) || std::isnan(q_J))
		return 0.0;
	// call complexPDF C++ library to get complex amplitude
	std::complex<double> amplitude = ComplexPDF::RelativisticSpinBreitWigner(m,mass_J,width_J,r,(int)J,q,q_J);
	// return |A|^2
	return std::norm(amplitude);
}
