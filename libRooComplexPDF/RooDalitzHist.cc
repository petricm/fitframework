/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooDalitzHist.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

#include <complex>
#include "libComplexPDF/libComplexPDF.h"

ClassImp(RooDalitzHist) 

RooDalitzHist::RooDalitzHist(const char *name, const char *title,
		RooAbsReal& _m12,
		RooAbsReal& _m23,
        TH2F *_hist,
		double _mM,
        double _m1,
		double _m2,
		double _m3) :
		RooAbsPdf(name,title),
		m12("m12","m12",this,_m12),
		m23("m23","m23",this,_m23),
        hist(_hist),
		mM(_mM),
        m1(_m1),
		m2(_m2),
		m3(_m3) {
}

RooDalitzHist::RooDalitzHist(const RooDalitzHist& other, const char* name) :
	   RooAbsPdf(other,name),
	   m12("m12",this,other.m12),
	   m23("m23",this,other.m23),
       hist(other.hist),
	   mM(other.mM),
       m1(other.m1),
	   m2(other.m2),
	   m3(other.m3) {
}

Double_t RooDalitzHist::evaluate() const {
	double sqrt_m12 = std::sqrt(m12);
	double sqrt_m23 = std::sqrt(m23);
    
    double x_max = hist->GetXaxis()->GetXmax();
    double x_min = hist->GetXaxis()->GetXmin();

    double y_max = hist->GetYaxis()->GetXmax();
    double y_min = hist->GetYaxis()->GetXmin();
    
    if (x_min>m12 || x_max< m12 || y_min>m23 || y_max<m23) {
        return 1.0e-5;
    }
    
	if(ComplexPDF::InsideDalitzLimits(sqrt_m12,sqrt_m23,mM,m1,m2,m3)) {
        double return_val = hist->GetBinContent(hist->FindBin(m12, m23));
        //double return_val = hist->Interpolate(m12, m23);
        if (return_val<0.001) {
            return 0.001;
        }
		return return_val;
	} else {
		return 1.0e-5;
	}
}


Int_t RooDalitzHist::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /* rangeName */) const {
	
    if (matchArgs(allVars, analVars, m12, m23)){
	//	return 1;
    }
    if (matchArgs(allVars, analVars, m12)){
	//	return 2;
    }
    if (matchArgs(allVars, analVars, m23)){
	//	return 3;
    }
    
	return 0;
}

Double_t RooDalitzHist::analyticalIntegral(Int_t code, const char* rangeName ) const {
	
    if (code==1) {
        
        int x_min = hist->GetXaxis()->FindBin(m12.min(rangeName));
        int x_max = hist->GetXaxis()->FindBin(m12.max(rangeName));
        int y_min = hist->GetYaxis()->FindBin(m23.min(rangeName));
        int y_max = hist->GetYaxis()->FindBin(m23.max(rangeName));
        
        return hist->Integral(x_min, x_max, y_min, y_max, "width");
    }
    
    if (code==2) {
        
        int x_min = hist->GetXaxis()->FindBin(m12.min(rangeName));
        int x_max = hist->GetXaxis()->FindBin(m12.max(rangeName));
        int y_min = hist->GetYaxis()->FindBin(m23);
        int y_max = hist->GetYaxis()->FindBin(m23);
        
        return hist->Integral(x_min, x_max, y_min, y_max, "width") / hist->GetBinWidth(1);
    }
    
    if (code==3) {
        
        int x_min = hist->GetXaxis()->FindBin(m12);
        int x_max = hist->GetXaxis()->FindBin(m12);
        int y_min = hist->GetYaxis()->FindBin(m23.min(rangeName));
        int y_max = hist->GetYaxis()->FindBin(m23.max(rangeName));
        
        return hist->Integral(x_min, x_max, y_min, y_max, "width") / hist->GetBinWidth(1);
    }
    
    
}







