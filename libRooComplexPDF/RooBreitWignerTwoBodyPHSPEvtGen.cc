/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooBreitWignerTwoBodyPHSPEvtGen.h"
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 
#include "libComplexPDF/libComplexPDF.h"

ClassImp(RooBreitWignerTwoBodyPHSPEvtGen)

RooBreitWignerTwoBodyPHSPEvtGen::RooBreitWignerTwoBodyPHSPEvtGen(const char *name, const char *title,
		RooAbsReal& _m,
		RooAbsReal& _mass_J,
		RooAbsReal& _width_J,
		double _cutoff,
		double _m1,
		double _m2) :
		RooAbsPdf(name,title),
		m("m","m",this,_m),
		mass_J("mass_J","mass_J",this,_mass_J),
		width_J("width_J","width_J",this,_width_J),
		cutoff(_cutoff),
		m1(_m1),
		m2(_m2) {
}

RooBreitWignerTwoBodyPHSPEvtGen::RooBreitWignerTwoBodyPHSPEvtGen(const RooBreitWignerTwoBodyPHSPEvtGen& other, const char* name) :
	   RooAbsPdf(other,name),
	   m("m",this,other.m),
	   mass_J("mass_J",this,other.mass_J),
	   width_J("width_J",this,other.width_J),
	   cutoff(other.cutoff),
	   m1(other.m1),
	   m2(other.m2) {
}

Double_t RooBreitWignerTwoBodyPHSPEvtGen::evaluate() const {
	if(m < (m1+m2)) {
		return 0.0;
	} else if (cutoff > 0 && m < (mass_J - cutoff)) {
		return 0.0;
	} else {
		// compute the two body phase space factor
		double E = ( m*m + m1*m1 - m2*m2 ) / ( 2.0 * m );
		double p = std::sqrt(E*E - m1*m1);

		double arg = m - mass_J;

		return (p * 1.0) / (arg*arg + 0.25*width_J*width_J);
	}
}
