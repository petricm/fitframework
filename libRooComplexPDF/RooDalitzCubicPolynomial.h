/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

#ifndef ROODALITZCUBICPOLYNOMIAL
#define ROODALITZCUBICPOLYNOMIAL

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"

class RooDalitzCubicPolynomial : public RooAbsPdf {
public:
	RooDalitzCubicPolynomial() : m1(0), m2(0), m3(0), mM(0), m12_offset(0), m23_offset(0) {} ;
	RooDalitzCubicPolynomial(const char *name, const char *title,
			RooAbsReal& _m12,
			RooAbsReal& _m23,
			RooAbsReal& _E_x,
			RooAbsReal& _E_y,
			RooAbsReal& _E_xx,
			RooAbsReal& _E_xy,
			RooAbsReal& _E_yy,
			RooAbsReal& _E_xxx,
			RooAbsReal& _E_xxy,
			RooAbsReal& _E_xyy,
			RooAbsReal& _E_yyy,
			double _m1,
			double _m2,
			double _m3,
			double _mM,
			double _m12_offset = 0.0,
			double _m23_offset = 0.0);
	RooDalitzCubicPolynomial(const RooDalitzCubicPolynomial& other, const char* name=0) ;
	virtual TObject* clone(const char* newname) const { return new RooDalitzCubicPolynomial(*this,newname); }
	inline virtual ~RooDalitzCubicPolynomial() { }
    
    virtual Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const;
	virtual Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const;
    
    Double_t adaptiveSimpsonsAux(double x, double a, double b, double epsilon,double S, double fa, double fb, double fc, int bottom) const;
    Double_t adaptiveSimpsons(double x, double a, double b, double epsilon, int maxRecursionDepth) const;
    
protected:

	RooRealProxy m12;
	RooRealProxy m23;
	RooRealProxy E_x;
	RooRealProxy E_y;
	RooRealProxy E_xx;
	RooRealProxy E_xy;
	RooRealProxy E_yy;
	RooRealProxy E_xxx;
	RooRealProxy E_xxy;
	RooRealProxy E_xyy;
	RooRealProxy E_yyy;
	const double m1;
	const double m2;
	const double m3;
	const double mM;
	const double m12_offset;
	const double m23_offset;

	Double_t evaluate() const;

private:

	ClassDef(RooDalitzCubicPolynomial,1) // Your description goes here...
};

#endif
